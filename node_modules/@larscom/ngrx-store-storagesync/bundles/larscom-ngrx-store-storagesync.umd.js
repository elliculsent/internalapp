(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash-es'), require('@angular/core'), require('@ngrx/store'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@larscom/ngrx-store-storagesync', ['exports', 'lodash-es', '@angular/core', '@ngrx/store', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.larscom = global.larscom || {}, global.larscom['ngrx-store-storagesync'] = {}), global.lodashEs, global.ng.core, global.store, global.rxjs, global.rxjs.operators));
}(this, (function (exports, lodashEs, core, store, rxjs, operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/storage-sync/actions.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var INIT_ACTION = '@ngrx/store/init';
    /** @type {?} */
    var INIT_ACTION_EFFECTS = '@ngrx/effects/init';
    /** @type {?} */
    var UPDATE_ACTION = '@ngrx/store/update-reducers';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/storage-sync/rehydrate-state.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var dateMatcher = /(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/;
    /**
     * \@internal Restores the resolved state from a storage location
     * \@param options the configurable options
     * \@return the restored state from the provided storage
     * @type {?}
     */
    var rehydrateState = ( /**
     * @template T
     * @param {?} __0
     * @return {?}
     */function (_a) {
        var storage = _a.storage, storageKeySerializer = _a.storageKeySerializer, features = _a.features, storageError = _a.storageError, currentVersion = _a.version;
        if (currentVersion) {
            try {
                /** @type {?} */
                var key = storageKeySerializer('version');
                /** @type {?} */
                var version = +storage.getItem(key);
                if (version < currentVersion) {
                    return null;
                }
            }
            catch (e) {
                if (storageError) {
                    storageError(e);
                }
                else {
                    throw e;
                }
            }
        }
        /** @type {?} */
        var state = features.reduce(( /**
         * @param {?} acc
         * @param {?} curr
         * @return {?}
         */function (acc, curr) {
            var _a;
            var storageKeySerializerForFeature = curr.storageKeySerializerForFeature, stateKey = curr.stateKey, deserialize = curr.deserialize, storageForFeature = curr.storageForFeature;
            /** @type {?} */
            var key = storageKeySerializerForFeature
                ? storageKeySerializerForFeature(stateKey)
                : storageKeySerializer(stateKey);
            try {
                /** @type {?} */
                var featureState = storageForFeature ? storageForFeature.getItem(key) : storage.getItem(key);
                return featureState
                    ? Object.assign(Object.assign({}, acc), (_a = {},
                        _a[stateKey] = deserialize
                            ? deserialize(featureState)
                            : JSON.parse(featureState, ( /**
                             * @param {?} _
                             * @param {?} value
                             * @return {?}
                             */function (_, value) { return dateMatcher.test(String(value)) ? new Date(value) : value; })),
                        _a)) : acc;
            }
            catch (e) {
                if (storageError) {
                    storageError(e);
                }
                else {
                    throw e;
                }
            }
        }), ( /** @type {?} */({})));
        return Object.keys(state).length ? state : null;
    });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * \@internal Blacklisting
     * \@return the filtered state
     * @type {?}
     */
    var excludeKeysFromState = ( /**
     * @template T
     * @param {?} state
     * @param {?=} excludeKeys
     * @return {?}
     */function (state, excludeKeys) {
        if (!excludeKeys) {
            return state;
        }
        /** @type {?} */
        var keyPairs = excludeKeys.map(( /**
         * @param {?} key
         * @return {?}
         */function (/**
         * @param {?} key
         * @return {?}
         */ key) { return ({
            rootKey: key.split('.')[0],
            nestedKey: key.split('.')[1]
        }); }));
        var _loop_1 = function (key) {
            if (state.hasOwnProperty(key)) {
                /** @type {?} */
                var keyPair = keyPairs.find(( /**
                 * @param {?} pair
                 * @return {?}
                 */function (/**
                 * @param {?} pair
                 * @return {?}
                 */ pair) { return pair.rootKey === key; }));
                /** @type {?} */
                var rootKey = keyPair ? keyPair.rootKey : null;
                /** @type {?} */
                var nestedKey = keyPair ? keyPair.nestedKey : null;
                switch (typeof state[key]) {
                    case 'object': {
                        if (rootKey && !state[key]) {
                            delete state[key];
                        }
                        else if (rootKey && nestedKey) {
                            excludeKeysFromState(state[key], __spread(excludeKeys, [nestedKey]));
                        }
                        else if (rootKey) {
                            delete state[key];
                        }
                        else {
                            excludeKeysFromState(state[key], excludeKeys);
                        }
                        break;
                    }
                    default: {
                        if (rootKey) {
                            delete state[key];
                        }
                    }
                }
            }
        };
        for (var key in state) {
            _loop_1(key);
        }
        return state;
    });
    /**
     * \@internal Remove empty objects from state
     * \@return the cleaned state
     * @type {?}
     */
    var cleanState = ( /**
     * @template T
     * @param {?} state
     * @return {?}
     */function (state) {
        for (var key in state) {
            if (!lodashEs.isPlainObject(state[key])) {
                continue;
            }
            cleanState(state[key]);
            if (!Object.keys(state[key]).length) {
                delete state[key];
            }
        }
        return state;
    });
    /**
     * \@internal Sync state with storage
     * \@param state the next state
     * \@param options the configurable options
     * \@return the next state
     * @type {?}
     */
    var stateSync = ( /**
     * @template T
     * @param {?} state
     * @param {?} __1
     * @return {?}
     */function (state, _a) {
        var features = _a.features, storage = _a.storage, storageKeySerializer = _a.storageKeySerializer, storageError = _a.storageError, currentVersion = _a.version;
        if (currentVersion) {
            try {
                /** @type {?} */
                var key = storageKeySerializer('version');
                storage.setItem(key, String(currentVersion));
            }
            catch (e) {
                if (storageError) {
                    storageError(e);
                }
                else {
                    throw e;
                }
            }
        }
        features
            .filter(( /**
     * @param {?} __0
     * @return {?}
     */function (_a) {
            var stateKey = _a.stateKey;
            return state[stateKey] !== undefined;
        }))
            .filter(( /**
     * @param {?} __0
     * @return {?}
     */function (_a) {
            var stateKey = _a.stateKey, shouldSync = _a.shouldSync;
            return (shouldSync ? shouldSync(state[stateKey], state) : true);
        }))
            .forEach(( /**
     * @param {?} __0
     * @return {?}
     */function (_a) {
            var stateKey = _a.stateKey, excludeKeys = _a.excludeKeys, storageKeySerializerForFeature = _a.storageKeySerializerForFeature, serialize = _a.serialize, storageForFeature = _a.storageForFeature;
            /** @type {?} */
            var featureState = lodashEs.cloneDeep(state[stateKey]);
            /** @type {?} */
            var filteredState = cleanState(excludeKeysFromState(featureState, excludeKeys));
            if (lodashEs.isPlainObject(filteredState) && !Object.keys(filteredState).length) {
                return;
            }
            /** @type {?} */
            var key = storageKeySerializerForFeature
                ? storageKeySerializerForFeature(stateKey)
                : storageKeySerializer(stateKey);
            /** @type {?} */
            var value = serialize ? serialize(filteredState) : JSON.stringify(filteredState);
            try {
                if (storageForFeature) {
                    storageForFeature.setItem(key, value);
                }
                else {
                    storage.setItem(key, value);
                }
            }
            catch (e) {
                if (storageError) {
                    storageError(e);
                }
                else {
                    throw e;
                }
            }
        }));
        return state;
    });

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/storage-sync/storage-sync.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * The StorageSync Meta Reducer for \@ngrx/store.
     *
     * \@param options The configuration for the meta reducer
     *
     * Check out github for more information.
     * @see https://github.com/larscom/ngrx-store-storagesync
     *
     * \@return the meta reducer function
     * @type {?}
     */
    var storageSync = ( /**
     * @template T
     * @param {?} options
     * @return {?}
     */function (options) { return ( /**
     * @param {?} reducer
     * @return {?}
     */function (reducer) {
        /** @type {?} */
        var config = Object.assign({ rehydrate: true, storageKeySerializer: ( /**
                 * @param {?} key
                 * @return {?}
                 */function (key) { return key; }), rehydrateStateMerger: ( /**
             * @param {?} nextState
             * @param {?} rehydratedState
             * @return {?}
             */function (nextState, rehydratedState) { return lodashEs.merge({}, nextState, rehydratedState); }) }, options);
        var rehydrate = config.rehydrate, rehydrateStateMerger = config.rehydrateStateMerger;
        /** @type {?} */
        var revivedState = rehydrate ? rehydrateState(config) : null;
        return ( /**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */function (state, action) {
            /** @type {?} */
            var nextState = action.type === INIT_ACTION ? reducer(state, action) : Object.assign({}, state);
            /** @type {?} */
            var shouldMerge = revivedState && [INIT_ACTION, UPDATE_ACTION].includes(action.type);
            /** @type {?} */
            var mergedState = reducer(shouldMerge ? rehydrateStateMerger(nextState, revivedState) : nextState, action);
            return [INIT_ACTION, INIT_ACTION_EFFECTS].includes(action.type) ? mergedState : stateSync(mergedState, config);
        });
    }); });

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/storage-sync/public_api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/form-sync/form-sync.constants.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FORM_SYNC_STORE_KEY = 'formSync';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/form-sync/providers/form-sync.providers.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FORM_SYNC_CONFIG = new core.InjectionToken('FORM_SYNC_CONFIG', {
        factory: ( /**
         * @return {?}
         */function () { return ({ syncOnSubmit: false, syncRawValue: false, syncValidOnly: false }); })
    });
    /** @type {?} */
    var FORM_SYNC_REDUCER = new core.InjectionToken('FORM_SYNC_REDUCER');

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/form-sync/store/form.actions.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var setForm = store.createAction('@larscom/form-sync/set', store.props());
    /** @type {?} */
    var patchForm = store.createAction('@larscom/form-sync/patch', store.props());
    /** @type {?} */
    var resetForm = store.createAction('@larscom/form-sync/reset', store.props());
    /** @type {?} */
    var deleteForm = store.createAction('@larscom/form-sync/delete', store.props());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/form-sync/store/form.selectors.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getFormSyncState = store.createFeatureSelector(FORM_SYNC_STORE_KEY);
    var ɵ0 = /**
     * @param {?} state
     * @param {?} __1
     * @return {?}
     */ function (state, _a) {
        var id = _a.id;
        return state[id];
    };
    /** @type {?} */
    var getFormSyncValue = store.createSelector(getFormSyncState, (ɵ0));

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/form-sync/directives/form-group.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormGroupDirective = /** @class */ (function () {
        /**
         * @param {?} config
         * @param {?} store
         */
        function FormGroupDirective(config, store) {
            this.config = config;
            this.store = store;
            this.formGroupSync = true;
            this.subscriptions = new rxjs.Subscription();
        }
        /**
         * @return {?}
         */
        FormGroupDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.formGroupId) {
                return;
            }
            var _a = this.config, syncOnSubmit = _a.syncOnSubmit, syncValidOnly = _a.syncValidOnly, syncRawValue = _a.syncRawValue;
            this.subscriptions.add(this.formGroup.valueChanges
                .pipe(operators.filter(( /**
         * @return {?}
         */function () { return _this.formGroupSync; })), operators.filter(( /**
             * @return {?}
             */function () { return !(syncValidOnly && !_this.formGroup.valid); })), operators.filter(( /**
             * @return {?}
             */function () { return !syncOnSubmit; })))
                .subscribe(( /**
         * @return {?}
         */function () { return _this.dispatch(syncRawValue); })));
            this.subscriptions.add(this.store
                .pipe(operators.filter(( /**
         * @return {?}
         */function () { return _this.formGroupSync; })), store.select(getFormSyncValue, { id: this.formGroupId }), operators.filter(( /**
             * @param {?} value
             * @return {?}
             */function (/**
             * @param {?} value
             * @return {?}
             */ value) { return value != null; })))
                .subscribe(( /**
         * @param {?} value
         * @return {?}
         */function (/**
         * @param {?} value
         * @return {?}
         */ value) { return _this.formGroup.patchValue(value, { emitEvent: false }); })));
        };
        /**
         * @return {?}
         */
        FormGroupDirective.prototype.ngOnDestroy = function () {
            this.subscriptions.unsubscribe();
        };
        /**
         * @return {?}
         */
        FormGroupDirective.prototype.onSubmit = function () {
            if (!this.formGroupId || !this.formGroupSync) {
                return;
            }
            var _a = this.config, syncOnSubmit = _a.syncOnSubmit, syncValidOnly = _a.syncValidOnly, syncRawValue = _a.syncRawValue;
            if (!syncOnSubmit) {
                return;
            }
            if (syncValidOnly && !this.formGroup.valid) {
                return;
            }
            this.dispatch(syncRawValue);
        };
        /**
         * @private
         * @param {?} syncRawValue
         * @return {?}
         */
        FormGroupDirective.prototype.dispatch = function (syncRawValue) {
            /** @type {?} */
            var value = syncRawValue ? this.formGroup.getRawValue() : this.formGroup.value;
            this.store.dispatch(patchForm({ id: this.formGroupId, value: value }));
        };
        return FormGroupDirective;
    }());
    FormGroupDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[formGroup]'
                },] }
    ];
    /** @nocollapse */
    FormGroupDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [FORM_SYNC_CONFIG,] }] },
        { type: store.Store }
    ]; };
    FormGroupDirective.propDecorators = {
        formGroup: [{ type: core.Input }],
        formGroupId: [{ type: core.Input }],
        formGroupSync: [{ type: core.Input }],
        onSubmit: [{ type: core.HostListener, args: ['submit',] }]
    };
    if (false) {
        /** @type {?} */
        FormGroupDirective.prototype.formGroup;
        /** @type {?} */
        FormGroupDirective.prototype.formGroupId;
        /** @type {?} */
        FormGroupDirective.prototype.formGroupSync;
        /**
         * @type {?}
         * @private
         */
        FormGroupDirective.prototype.subscriptions;
        /**
         * @type {?}
         * @private
         */
        FormGroupDirective.prototype.config;
        /**
         * @type {?}
         * @private
         */
        FormGroupDirective.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/form-sync/store/form.reducer.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IFormSyncState() { }
    // tslint:disable: no-shadowed-variable
    var ɵ0$1 = /**
     * @param {?} state
     * @param {?} __1
     * @return {?}
     */ function (state, _a) {
        var _b;
        var id = _a.id, value = _a.value;
        return (Object.assign(Object.assign({}, state), (_b = {}, _b[id] = value, _b)));
    }, ɵ1 = /**
     * @param {?} state
     * @param {?} __1
     * @return {?}
     */ function (state, _a) {
        var _b;
        var id = _a.id, value = _a.value;
        return lodashEs.merge({}, Object.assign({}, state), (_b = {}, _b[id] = value, _b));
    }, ɵ2 = /**
     * @param {?} state
     * @param {?} __1
     * @return {?}
     */ function (state, _a) {
        var _b;
        var id = _a.id;
        /** @type {?} */
        var reset = ( /**
         * @param {?} slice
         * @return {?}
         */function (slice) {
            for (var property in slice) {
                if (!slice.hasOwnProperty(property)) {
                    continue;
                }
                if (lodashEs.isPlainObject(slice[property])) {
                    reset(slice[property]);
                }
                else if (lodashEs.isArray(slice[property])) {
                    Array(slice[property]).forEach(( /**
                     * @param {?} p
                     * @return {?}
                     */function (/**
                     * @param {?} p
                     * @return {?}
                     */ p) { return reset(p); }));
                }
                else {
                    slice[property] = null;
                }
            }
            return slice;
        });
        /** @type {?} */
        var value = reset(lodashEs.cloneDeep(state[id]));
        return Object.assign(Object.assign({}, state), (_b = {}, _b[id] = value, _b));
    }, ɵ3 = /**
     * @param {?} state
     * @param {?} __1
     * @return {?}
     */ function (state, _a) {
        var _b;
        var id = _a.id;
        return (Object.assign(Object.assign({}, state), (_b = {}, _b[id] = undefined, _b)));
    };
    /**
     * The form sync reducer for \@ngrx/store.
     * @type {?}
     */
    var formSyncReducer = store.createReducer(Object(), store.on(setForm, (ɵ0$1)), store.on(patchForm, (ɵ1)), store.on(resetForm, (ɵ2)), store.on(deleteForm, (ɵ3)));

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/form-sync/form-sync.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormSyncModule = /** @class */ (function () {
        function FormSyncModule() {
        }
        /**
         * Import 'FormSyncModule.forRoot()' only once.
         * Use 'FormSyncModule' for additional imports
         * inside feature modules.
         * @return {?}
         */
        FormSyncModule.forRoot = function () {
            return {
                ngModule: FormSyncModule,
                providers: [
                    {
                        provide: FORM_SYNC_REDUCER,
                        useValue: formSyncReducer
                    }
                ]
            };
        };
        return FormSyncModule;
    }());
    FormSyncModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [FormGroupDirective],
                    imports: [store.StoreModule.forFeature(FORM_SYNC_STORE_KEY, FORM_SYNC_REDUCER)],
                    exports: [FormGroupDirective]
                },] }
    ];

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/form-sync/public_api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: public_api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: larscom-ngrx-store-storagesync.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FORM_SYNC_CONFIG = FORM_SYNC_CONFIG;
    exports.FORM_SYNC_REDUCER = FORM_SYNC_REDUCER;
    exports.FORM_SYNC_STORE_KEY = FORM_SYNC_STORE_KEY;
    exports.FormGroupDirective = FormGroupDirective;
    exports.FormSyncModule = FormSyncModule;
    exports.deleteForm = deleteForm;
    exports.formSyncReducer = formSyncReducer;
    exports.getFormSyncValue = getFormSyncValue;
    exports.patchForm = patchForm;
    exports.resetForm = resetForm;
    exports.setForm = setForm;
    exports.storageSync = storageSync;
    exports.ɵa = getFormSyncState;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=larscom-ngrx-store-storagesync.umd.js.map
