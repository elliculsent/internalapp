/**
 * @fileoverview added by tsickle
 * Generated from: lib/form-sync/directives/form-group.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Inject, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { select, Store } from '@ngrx/store';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { FORM_SYNC_CONFIG } from '../providers/form-sync.providers';
import { patchForm } from '../store/form.actions';
import { getFormSyncValue } from '../store/form.selectors';
export class FormGroupDirective {
    /**
     * @param {?} config
     * @param {?} store
     */
    constructor(config, store) {
        this.config = config;
        this.store = store;
        this.formGroupSync = true;
        this.subscriptions = new Subscription();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.formGroupId) {
            return;
        }
        const { syncOnSubmit, syncValidOnly, syncRawValue } = this.config;
        this.subscriptions.add(this.formGroup.valueChanges
            .pipe(filter((/**
         * @return {?}
         */
        () => this.formGroupSync)), filter((/**
         * @return {?}
         */
        () => !(syncValidOnly && !this.formGroup.valid))), filter((/**
         * @return {?}
         */
        () => !syncOnSubmit)))
            .subscribe((/**
         * @return {?}
         */
        () => this.dispatch(syncRawValue))));
        this.subscriptions.add(this.store
            .pipe(filter((/**
         * @return {?}
         */
        () => this.formGroupSync)), select(getFormSyncValue, { id: this.formGroupId }), filter((/**
         * @param {?} value
         * @return {?}
         */
        value => value != null)))
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => this.formGroup.patchValue(value, { emitEvent: false }))));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @return {?}
     */
    onSubmit() {
        if (!this.formGroupId || !this.formGroupSync) {
            return;
        }
        const { syncOnSubmit, syncValidOnly, syncRawValue } = this.config;
        if (!syncOnSubmit) {
            return;
        }
        if (syncValidOnly && !this.formGroup.valid) {
            return;
        }
        this.dispatch(syncRawValue);
    }
    /**
     * @private
     * @param {?} syncRawValue
     * @return {?}
     */
    dispatch(syncRawValue) {
        /** @type {?} */
        const value = syncRawValue ? this.formGroup.getRawValue() : this.formGroup.value;
        this.store.dispatch(patchForm({ id: this.formGroupId, value }));
    }
}
FormGroupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[formGroup]'
            },] }
];
/** @nocollapse */
FormGroupDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [FORM_SYNC_CONFIG,] }] },
    { type: Store }
];
FormGroupDirective.propDecorators = {
    formGroup: [{ type: Input }],
    formGroupId: [{ type: Input }],
    formGroupSync: [{ type: Input }],
    onSubmit: [{ type: HostListener, args: ['submit',] }]
};
if (false) {
    /** @type {?} */
    FormGroupDirective.prototype.formGroup;
    /** @type {?} */
    FormGroupDirective.prototype.formGroupId;
    /** @type {?} */
    FormGroupDirective.prototype.formGroupSync;
    /**
     * @type {?}
     * @private
     */
    FormGroupDirective.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    FormGroupDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FormGroupDirective.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LXN0b3JlLXN0b3JhZ2VzeW5jL3NyYy9saWIvZm9ybS1zeW5jL2RpcmVjdGl2ZXMvZm9ybS1ncm91cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDNUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBSzNELE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBSzdCLFlBQXVELE1BQXVCLEVBQW1CLEtBQWlCO1FBQTNELFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQW1CLFVBQUssR0FBTCxLQUFLLENBQVk7UUFGekcsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFJYixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFGaUUsQ0FBQzs7OztJQUl0SCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsT0FBTztTQUNSO2NBRUssRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNO1FBQ2pFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVk7YUFDeEIsSUFBSSxDQUNILE1BQU07OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUMsRUFDaEMsTUFBTTs7O1FBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUMsRUFDdkQsTUFBTTs7O1FBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxZQUFZLEVBQUMsQ0FDNUI7YUFDQSxTQUFTOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQ2hELENBQUM7UUFFRixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FDcEIsSUFBSSxDQUFDLEtBQUs7YUFDUCxJQUFJLENBQ0gsTUFBTTs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBQyxFQUNoQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQ2xELE1BQU07Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUMsQ0FDL0I7YUFDQSxTQUFTOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUM5RSxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFHRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzVDLE9BQU87U0FDUjtjQUVLLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTTtRQUVqRSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLE9BQU87U0FDUjtRQUVELElBQUksYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7WUFDMUMsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7Ozs7SUFFTyxRQUFRLENBQUMsWUFBcUI7O2NBQzlCLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSztRQUNoRixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7O1lBakVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTthQUN4Qjs7Ozs0Q0FNYyxNQUFNLFNBQUMsZ0JBQWdCO1lBaEJyQixLQUFLOzs7d0JBWW5CLEtBQUs7MEJBQ0wsS0FBSzs0QkFDTCxLQUFLO3VCQXFDTCxZQUFZLFNBQUMsUUFBUTs7OztJQXZDdEIsdUNBQThCOztJQUM5Qix5Q0FBNkI7O0lBQzdCLDJDQUE4Qjs7Ozs7SUFJOUIsMkNBQW9EOzs7OztJQUZ4QyxvQ0FBa0U7Ozs7O0lBQUUsbUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIEluamVjdCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBzZWxlY3QsIFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJRm9ybVN5bmNDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvZm9ybS1zeW5jLWNvbmZpZyc7XG5pbXBvcnQgeyBGT1JNX1NZTkNfQ09ORklHIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2Zvcm0tc3luYy5wcm92aWRlcnMnO1xuaW1wb3J0IHsgcGF0Y2hGb3JtIH0gZnJvbSAnLi4vc3RvcmUvZm9ybS5hY3Rpb25zJztcbmltcG9ydCB7IGdldEZvcm1TeW5jVmFsdWUgfSBmcm9tICcuLi9zdG9yZS9mb3JtLnNlbGVjdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmb3JtR3JvdXBdJ1xufSlcbmV4cG9ydCBjbGFzcyBGb3JtR3JvdXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuICBASW5wdXQoKSBmb3JtR3JvdXBJZDogc3RyaW5nO1xuICBASW5wdXQoKSBmb3JtR3JvdXBTeW5jID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEZPUk1fU1lOQ19DT05GSUcpIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBJRm9ybVN5bmNDb25maWcsIHByaXZhdGUgcmVhZG9ubHkgc3RvcmU6IFN0b3JlPGFueT4pIHt9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBzdWJzY3JpcHRpb25zID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5mb3JtR3JvdXBJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgc3luY09uU3VibWl0LCBzeW5jVmFsaWRPbmx5LCBzeW5jUmF3VmFsdWUgfSA9IHRoaXMuY29uZmlnO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoXG4gICAgICB0aGlzLmZvcm1Hcm91cC52YWx1ZUNoYW5nZXNcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgZmlsdGVyKCgpID0+IHRoaXMuZm9ybUdyb3VwU3luYyksXG4gICAgICAgICAgZmlsdGVyKCgpID0+ICEoc3luY1ZhbGlkT25seSAmJiAhdGhpcy5mb3JtR3JvdXAudmFsaWQpKSxcbiAgICAgICAgICBmaWx0ZXIoKCkgPT4gIXN5bmNPblN1Ym1pdClcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMuZGlzcGF0Y2goc3luY1Jhd1ZhbHVlKSlcbiAgICApO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChcbiAgICAgIHRoaXMuc3RvcmVcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgZmlsdGVyKCgpID0+IHRoaXMuZm9ybUdyb3VwU3luYyksXG4gICAgICAgICAgc2VsZWN0KGdldEZvcm1TeW5jVmFsdWUsIHsgaWQ6IHRoaXMuZm9ybUdyb3VwSWQgfSksXG4gICAgICAgICAgZmlsdGVyKHZhbHVlID0+IHZhbHVlICE9IG51bGwpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSh2YWx1ZSA9PiB0aGlzLmZvcm1Hcm91cC5wYXRjaFZhbHVlKHZhbHVlLCB7IGVtaXRFdmVudDogZmFsc2UgfSkpXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignc3VibWl0JylcbiAgb25TdWJtaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmZvcm1Hcm91cElkIHx8ICF0aGlzLmZvcm1Hcm91cFN5bmMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IHN5bmNPblN1Ym1pdCwgc3luY1ZhbGlkT25seSwgc3luY1Jhd1ZhbHVlIH0gPSB0aGlzLmNvbmZpZztcblxuICAgIGlmICghc3luY09uU3VibWl0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN5bmNWYWxpZE9ubHkgJiYgIXRoaXMuZm9ybUdyb3VwLnZhbGlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5kaXNwYXRjaChzeW5jUmF3VmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaChzeW5jUmF3VmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZSA9IHN5bmNSYXdWYWx1ZSA/IHRoaXMuZm9ybUdyb3VwLmdldFJhd1ZhbHVlKCkgOiB0aGlzLmZvcm1Hcm91cC52YWx1ZTtcbiAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKHBhdGNoRm9ybSh7IGlkOiB0aGlzLmZvcm1Hcm91cElkLCB2YWx1ZSB9KSk7XG4gIH1cbn1cbiJdfQ==