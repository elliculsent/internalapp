/**
 * @fileoverview added by tsickle
 * Generated from: lib/form-sync/store/form.reducer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createReducer, on } from '@ngrx/store';
import { cloneDeep, isArray, isPlainObject, merge } from 'lodash-es';
import { deleteForm, patchForm, resetForm, setForm } from './form.actions';
/**
 * @record
 */
export function IFormSyncState() { }
// tslint:disable: no-shadowed-variable
const ɵ0 = /**
 * @param {?} state
 * @param {?} __1
 * @return {?}
 */
(state, { id, value }) => (Object.assign(Object.assign({}, state), { [id]: value })), ɵ1 = /**
 * @param {?} state
 * @param {?} __1
 * @return {?}
 */
(state, { id, value }) => merge({}, Object.assign({}, state), { [id]: value }), ɵ2 = /**
 * @param {?} state
 * @param {?} __1
 * @return {?}
 */
(state, { id }) => {
    /** @type {?} */
    const reset = (/**
     * @param {?} slice
     * @return {?}
     */
    (slice) => {
        for (const property in slice) {
            if (!slice.hasOwnProperty(property)) {
                continue;
            }
            if (isPlainObject(slice[property])) {
                reset(slice[property]);
            }
            else if (isArray(slice[property])) {
                Array(slice[property]).forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => reset(p)));
            }
            else {
                slice[property] = null;
            }
        }
        return slice;
    });
    /** @type {?} */
    const value = reset(cloneDeep(state[id]));
    return Object.assign(Object.assign({}, state), { [id]: value });
}, ɵ3 = /**
 * @param {?} state
 * @param {?} __1
 * @return {?}
 */
(state, { id }) => (Object.assign(Object.assign({}, state), { [id]: undefined }));
/**
 * The form sync reducer for \@ngrx/store.
 * @type {?}
 */
export const formSyncReducer = createReducer(Object(), on(setForm, (ɵ0)), on(patchForm, (ɵ1)), on(resetForm, (ɵ2)), on(deleteForm, (ɵ3)));
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1zdG9yZS1zdG9yYWdlc3luYy9zcmMvbGliL2Zvcm0tc3luYy9zdG9yZS9mb3JtLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUUzRSxvQ0FFQzs7Ozs7OztBQVFhLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxpQ0FBTSxLQUFLLEtBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLElBQUc7Ozs7O0FBQ25ELENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxvQkFBTyxLQUFLLEdBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDOzs7OztBQUNsRSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7O1VBQ3hCLEtBQUs7Ozs7SUFBRyxDQUFDLEtBQThCLEVBQUUsRUFBRTtRQUMvQyxLQUFLLE1BQU0sUUFBUSxJQUFJLEtBQUssRUFBRTtZQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDbkMsU0FBUzthQUNWO1lBRUQsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUN4QjtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtnQkFDbkMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU87Ozs7Z0JBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQzthQUMvQztpQkFBTTtnQkFDTCxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ3hCO1NBQ0Y7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQTs7VUFFSyxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV6Qyx1Q0FBWSxLQUFLLEtBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLElBQUc7QUFDbkMsQ0FBQzs7Ozs7QUFDYyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxpQ0FBTSxLQUFLLEtBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLElBQUc7Ozs7O0FBMUJuRSxNQUFNLE9BQU8sZUFBZSxHQUFHLGFBQWEsQ0FDMUMsTUFBTSxFQUFFLEVBQ1IsRUFBRSxDQUFDLE9BQU8sT0FBd0QsRUFDbEUsRUFBRSxDQUFDLFNBQVMsT0FBcUUsRUFDakYsRUFBRSxDQUFDLFNBQVMsT0FxQlYsRUFDRixFQUFFLENBQUMsVUFBVSxPQUFxRCxDQUNuRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlZHVjZXIsIG9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgY2xvbmVEZWVwLCBpc0FycmF5LCBpc1BsYWluT2JqZWN0LCBtZXJnZSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbmltcG9ydCB7IGRlbGV0ZUZvcm0sIHBhdGNoRm9ybSwgcmVzZXRGb3JtLCBzZXRGb3JtIH0gZnJvbSAnLi9mb3JtLmFjdGlvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElGb3JtU3luY1N0YXRlIHtcbiAgW2Zvcm1Hcm91cElkOiBzdHJpbmddOiBhbnk7XG59XG5cbi8qKlxuICogVGhlIGZvcm0gc3luYyByZWR1Y2VyIGZvciBAbmdyeC9zdG9yZS5cbiAqL1xuLy8gdHNsaW50OmRpc2FibGU6IG5vLXNoYWRvd2VkLXZhcmlhYmxlXG5leHBvcnQgY29uc3QgZm9ybVN5bmNSZWR1Y2VyID0gY3JlYXRlUmVkdWNlcihcbiAgT2JqZWN0KCksXG4gIG9uKHNldEZvcm0sIChzdGF0ZSwgeyBpZCwgdmFsdWUgfSkgPT4gKHsgLi4uc3RhdGUsIFtpZF06IHZhbHVlIH0pKSxcbiAgb24ocGF0Y2hGb3JtLCAoc3RhdGUsIHsgaWQsIHZhbHVlIH0pID0+IG1lcmdlKHt9LCB7IC4uLnN0YXRlIH0sIHsgW2lkXTogdmFsdWUgfSkpLFxuICBvbihyZXNldEZvcm0sIChzdGF0ZSwgeyBpZCB9KSA9PiB7XG4gICAgY29uc3QgcmVzZXQgPSAoc2xpY2U6IFBhcnRpYWw8SUZvcm1TeW5jU3RhdGU+KSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHNsaWNlKSB7XG4gICAgICAgIGlmICghc2xpY2UuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChzbGljZVtwcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgcmVzZXQoc2xpY2VbcHJvcGVydHldKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHNsaWNlW3Byb3BlcnR5XSkpIHtcbiAgICAgICAgICBBcnJheShzbGljZVtwcm9wZXJ0eV0pLmZvckVhY2gocCA9PiByZXNldChwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpY2VbcHJvcGVydHldID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlO1xuICAgIH07XG5cbiAgICBjb25zdCB2YWx1ZSA9IHJlc2V0KGNsb25lRGVlcChzdGF0ZVtpZF0pKTtcblxuICAgIHJldHVybiB7IC4uLnN0YXRlLCBbaWRdOiB2YWx1ZSB9O1xuICB9KSxcbiAgb24oZGVsZXRlRm9ybSwgKHN0YXRlLCB7IGlkIH0pID0+ICh7IC4uLnN0YXRlLCBbaWRdOiB1bmRlZmluZWQgfSkpXG4pO1xuIl19