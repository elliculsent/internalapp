/**
 * @fileoverview added by tsickle
 * Generated from: lib/storage-sync/rehydrate-state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const dateMatcher = /(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/;
/**
 * \@internal Restores the resolved state from a storage location
 * \@param options the configurable options
 * \@return the restored state from the provided storage
 * @type {?}
 */
export const rehydrateState = (/**
 * @template T
 * @param {?} __0
 * @return {?}
 */
({ storage, storageKeySerializer, features, storageError, version: currentVersion }) => {
    if (currentVersion) {
        try {
            /** @type {?} */
            const key = storageKeySerializer('version');
            /** @type {?} */
            const version = +storage.getItem(key);
            if (version < currentVersion) {
                return null;
            }
        }
        catch (e) {
            if (storageError) {
                storageError(e);
            }
            else {
                throw e;
            }
        }
    }
    /** @type {?} */
    const state = features.reduce((/**
     * @param {?} acc
     * @param {?} curr
     * @return {?}
     */
    (acc, curr) => {
        const { storageKeySerializerForFeature, stateKey, deserialize, storageForFeature } = curr;
        /** @type {?} */
        const key = storageKeySerializerForFeature
            ? storageKeySerializerForFeature(stateKey)
            : storageKeySerializer(stateKey);
        try {
            /** @type {?} */
            const featureState = storageForFeature ? storageForFeature.getItem(key) : storage.getItem(key);
            return featureState
                ? Object.assign(Object.assign({}, acc), {
                    [stateKey]: deserialize
                        ? deserialize(featureState)
                        : JSON.parse(featureState, (/**
                         * @param {?} _
                         * @param {?} value
                         * @return {?}
                         */
                        (_, value) => dateMatcher.test(String(value)) ? new Date(value) : value))
                }) : acc;
        }
        catch (e) {
            if (storageError) {
                storageError(e);
            }
            else {
                throw e;
            }
        }
    }), (/** @type {?} */ ({})));
    return Object.keys(state).length ? state : null;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVoeWRyYXRlLXN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1zdG9yZS1zdG9yYWdlc3luYy9zcmMvbGliL3N0b3JhZ2Utc3luYy9yZWh5ZHJhdGUtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O01BRU0sV0FBVyxHQUFHLGlEQUFpRDs7Ozs7OztBQU9yRSxNQUFNLE9BQU8sY0FBYzs7Ozs7QUFBRyxDQUFJLEVBQ2hDLE9BQU8sRUFDUCxvQkFBb0IsRUFDcEIsUUFBUSxFQUNSLFlBQVksRUFDWixPQUFPLEVBQUUsY0FBYyxFQUNBLEVBQUssRUFBRTtJQUM5QixJQUFJLGNBQWMsRUFBRTtRQUNsQixJQUFJOztrQkFDSSxHQUFHLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDOztrQkFDckMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDckMsSUFBSSxPQUFPLEdBQUcsY0FBYyxFQUFFO2dCQUM1QixPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksWUFBWSxFQUFFO2dCQUNoQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDakI7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLENBQUM7YUFDVDtTQUNGO0tBQ0Y7O1VBQ0ssS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNOzs7OztJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO2NBQ3ZDLEVBQUUsOEJBQThCLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxHQUFHLElBQUk7O2NBRW5GLEdBQUcsR0FBRyw4QkFBOEI7WUFDeEMsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLFFBQVEsQ0FBQztZQUMxQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDO1FBRWxDLElBQUk7O2tCQUNJLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUM5RixPQUFPLFlBQVk7Z0JBQ2pCLENBQUMsaUNBQ00sR0FBRyxHQUNIO29CQUNELENBQUMsUUFBUSxDQUFDLEVBQUUsV0FBVzt3QkFDckIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUM7d0JBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVk7Ozs7O3dCQUFFLENBQUMsQ0FBUyxFQUFFLEtBQWEsRUFBRSxFQUFFLENBQ3BELFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQzFEO2lCQUNOLEVBRUwsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUNUO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLFlBQVksRUFBRTtnQkFDaEIsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pCO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxDQUFDO2FBQ1Q7U0FDRjtJQUNILENBQUMsR0FBRSxtQkFBQSxFQUFFLEVBQUssQ0FBQztJQUNYLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2xELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTdG9yYWdlU3luY09wdGlvbnMgfSBmcm9tICcuL21vZGVscy9zdG9yYWdlLXN5bmMtb3B0aW9ucyc7XG5cbmNvbnN0IGRhdGVNYXRjaGVyID0gLyhcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pVChcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pLztcblxuLyoqXG4gKiBAaW50ZXJuYWwgUmVzdG9yZXMgdGhlIHJlc29sdmVkIHN0YXRlIGZyb20gYSBzdG9yYWdlIGxvY2F0aW9uXG4gKiBAcGFyYW0gb3B0aW9ucyB0aGUgY29uZmlndXJhYmxlIG9wdGlvbnNcbiAqIEByZXR1cm5zIHRoZSByZXN0b3JlZCBzdGF0ZSBmcm9tIHRoZSBwcm92aWRlZCBzdG9yYWdlXG4gKi9cbmV4cG9ydCBjb25zdCByZWh5ZHJhdGVTdGF0ZSA9IDxUPih7XG4gIHN0b3JhZ2UsXG4gIHN0b3JhZ2VLZXlTZXJpYWxpemVyLFxuICBmZWF0dXJlcyxcbiAgc3RvcmFnZUVycm9yLFxuICB2ZXJzaW9uOiBjdXJyZW50VmVyc2lvblxufTogSVN0b3JhZ2VTeW5jT3B0aW9uczxUPik6IFQgPT4ge1xuICBpZiAoY3VycmVudFZlcnNpb24pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qga2V5ID0gc3RvcmFnZUtleVNlcmlhbGl6ZXIoJ3ZlcnNpb24nKTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSArc3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICBpZiAodmVyc2lvbiA8IGN1cnJlbnRWZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChzdG9yYWdlRXJyb3IpIHtcbiAgICAgICAgc3RvcmFnZUVycm9yKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3Qgc3RhdGUgPSBmZWF0dXJlcy5yZWR1Y2U8VD4oKGFjYywgY3VycikgPT4ge1xuICAgIGNvbnN0IHsgc3RvcmFnZUtleVNlcmlhbGl6ZXJGb3JGZWF0dXJlLCBzdGF0ZUtleSwgZGVzZXJpYWxpemUsIHN0b3JhZ2VGb3JGZWF0dXJlIH0gPSBjdXJyO1xuXG4gICAgY29uc3Qga2V5ID0gc3RvcmFnZUtleVNlcmlhbGl6ZXJGb3JGZWF0dXJlXG4gICAgICA/IHN0b3JhZ2VLZXlTZXJpYWxpemVyRm9yRmVhdHVyZShzdGF0ZUtleSlcbiAgICAgIDogc3RvcmFnZUtleVNlcmlhbGl6ZXIoc3RhdGVLZXkpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGZlYXR1cmVTdGF0ZSA9IHN0b3JhZ2VGb3JGZWF0dXJlID8gc3RvcmFnZUZvckZlYXR1cmUuZ2V0SXRlbShrZXkpIDogc3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICByZXR1cm4gZmVhdHVyZVN0YXRlXG4gICAgICAgID8ge1xuICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgLi4ue1xuICAgICAgICAgICAgICBbc3RhdGVLZXldOiBkZXNlcmlhbGl6ZVxuICAgICAgICAgICAgICAgID8gZGVzZXJpYWxpemUoZmVhdHVyZVN0YXRlKVxuICAgICAgICAgICAgICAgIDogSlNPTi5wYXJzZShmZWF0dXJlU3RhdGUsIChfOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgIGRhdGVNYXRjaGVyLnRlc3QoU3RyaW5nKHZhbHVlKSkgPyBuZXcgRGF0ZSh2YWx1ZSkgOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgOiBhY2M7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHN0b3JhZ2VFcnJvcikge1xuICAgICAgICBzdG9yYWdlRXJyb3IoZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge30gYXMgVCk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoID8gc3RhdGUgOiBudWxsO1xufTtcbiJdfQ==