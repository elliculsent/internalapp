/**
 * @fileoverview added by tsickle
 * Generated from: lib/storage-sync/state-sync.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep, isPlainObject } from 'lodash-es';
/**
 * \@internal Blacklisting
 * \@return the filtered state
 * @type {?}
 */
export const excludeKeysFromState = (/**
 * @template T
 * @param {?} state
 * @param {?=} excludeKeys
 * @return {?}
 */
(state, excludeKeys) => {
    if (!excludeKeys) {
        return state;
    }
    /** @type {?} */
    const keyPairs = excludeKeys.map((/**
     * @param {?} key
     * @return {?}
     */
    key => ({
        rootKey: key.split('.')[0],
        nestedKey: key.split('.')[1]
    })));
    for (const key in state) {
        if (state.hasOwnProperty(key)) {
            /** @type {?} */
            const keyPair = keyPairs.find((/**
             * @param {?} pair
             * @return {?}
             */
            pair => pair.rootKey === key));
            /** @type {?} */
            const rootKey = keyPair ? keyPair.rootKey : null;
            /** @type {?} */
            const nestedKey = keyPair ? keyPair.nestedKey : null;
            switch (typeof state[key]) {
                case 'object': {
                    if (rootKey && !state[key]) {
                        delete state[key];
                    }
                    else if (rootKey && nestedKey) {
                        excludeKeysFromState(state[key], [...excludeKeys, nestedKey]);
                    }
                    else if (rootKey) {
                        delete state[key];
                    }
                    else {
                        excludeKeysFromState(state[key], excludeKeys);
                    }
                    break;
                }
                default: {
                    if (rootKey) {
                        delete state[key];
                    }
                }
            }
        }
    }
    return state;
});
/**
 * \@internal Remove empty objects from state
 * \@return the cleaned state
 * @type {?}
 */
export const cleanState = (/**
 * @template T
 * @param {?} state
 * @return {?}
 */
(state) => {
    for (const key in state) {
        if (!isPlainObject(state[key])) {
            continue;
        }
        cleanState(state[key]);
        if (!Object.keys(state[key]).length) {
            delete state[key];
        }
    }
    return state;
});
/**
 * \@internal Sync state with storage
 * \@param state the next state
 * \@param options the configurable options
 * \@return the next state
 * @type {?}
 */
export const stateSync = (/**
 * @template T
 * @param {?} state
 * @param {?} __1
 * @return {?}
 */
(state, { features, storage, storageKeySerializer, storageError, version: currentVersion }) => {
    if (currentVersion) {
        try {
            /** @type {?} */
            const key = storageKeySerializer('version');
            storage.setItem(key, String(currentVersion));
        }
        catch (e) {
            if (storageError) {
                storageError(e);
            }
            else {
                throw e;
            }
        }
    }
    features
        .filter((/**
     * @param {?} __0
     * @return {?}
     */
    ({ stateKey }) => state[stateKey] !== undefined))
        .filter((/**
     * @param {?} __0
     * @return {?}
     */
    ({ stateKey, shouldSync }) => (shouldSync ? shouldSync(state[stateKey], state) : true)))
        .forEach((/**
     * @param {?} __0
     * @return {?}
     */
    ({ stateKey, excludeKeys, storageKeySerializerForFeature, serialize, storageForFeature }) => {
        /** @type {?} */
        const featureState = cloneDeep(state[stateKey]);
        /** @type {?} */
        const filteredState = cleanState(excludeKeysFromState(featureState, excludeKeys));
        if (isPlainObject(filteredState) && !Object.keys(filteredState).length) {
            return;
        }
        /** @type {?} */
        const key = storageKeySerializerForFeature
            ? storageKeySerializerForFeature(stateKey)
            : storageKeySerializer(stateKey);
        /** @type {?} */
        const value = serialize ? serialize(filteredState) : JSON.stringify(filteredState);
        try {
            if (storageForFeature) {
                storageForFeature.setItem(key, value);
            }
            else {
                storage.setItem(key, value);
            }
        }
        catch (e) {
            if (storageError) {
                storageError(e);
            }
            else {
                throw e;
            }
        }
    }));
    return state;
});
//# sourceMappingURL=data:application/json;base64,