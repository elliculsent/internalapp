/**
 * @fileoverview added by tsickle
 * Generated from: lib/storage-sync/storage-sync.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { merge } from 'lodash-es';
import { INIT_ACTION, INIT_ACTION_EFFECTS, UPDATE_ACTION } from './actions';
import { rehydrateState } from './rehydrate-state';
import { stateSync } from './state-sync';
/**
 * The StorageSync Meta Reducer for \@ngrx/store.
 *
 * \@param options The configuration for the meta reducer
 *
 * Check out github for more information.
 * @see https://github.com/larscom/ngrx-store-storagesync
 *
 * \@return the meta reducer function
 * @type {?}
 */
export const storageSync = (/**
 * @template T
 * @param {?} options
 * @return {?}
 */
(options) => (/**
 * @param {?} reducer
 * @return {?}
 */
(reducer) => {
    /** @type {?} */
    const config = Object.assign({ rehydrate: true, storageKeySerializer: (/**
         * @param {?} key
         * @return {?}
         */
        (key) => key), rehydrateStateMerger: (/**
         * @param {?} nextState
         * @param {?} rehydratedState
         * @return {?}
         */
        (nextState, rehydratedState) => merge({}, nextState, rehydratedState)) }, options);
    const { rehydrate, rehydrateStateMerger } = config;
    /** @type {?} */
    const revivedState = rehydrate ? rehydrateState(config) : null;
    return (/**
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    (state, action) => {
        /** @type {?} */
        const nextState = action.type === INIT_ACTION ? reducer(state, action) : Object.assign({}, state);
        /** @type {?} */
        const shouldMerge = revivedState && [INIT_ACTION, UPDATE_ACTION].includes(action.type);
        /** @type {?} */
        const mergedState = reducer(shouldMerge ? rehydrateStateMerger(nextState, revivedState) : nextState, action);
        return [INIT_ACTION, INIT_ACTION_EFFECTS].includes(action.type) ? mergedState : stateSync(mergedState, config);
    });
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1zeW5jLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1zdG9yZS1zdG9yYWdlc3luYy9zcmMvbGliL3N0b3JhZ2Utc3luYy9zdG9yYWdlLXN5bmMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTVFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7Ozs7Ozs7Ozs7QUFZekMsTUFBTSxPQUFPLFdBQVc7Ozs7O0FBQUcsQ0FBSSxPQUErQixFQUFFLEVBQUU7Ozs7QUFBQyxDQUNqRSxPQUF3QyxFQUNMLEVBQUU7O1VBQy9CLE1BQU0sbUJBQ1YsU0FBUyxFQUFFLElBQUksRUFDZixvQkFBb0I7Ozs7UUFBRSxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUMxQyxvQkFBb0I7Ozs7O1FBQUUsQ0FBQyxTQUFTLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxlQUFlLENBQUMsS0FDeEYsT0FBTyxDQUNYO1VBRUssRUFBRSxTQUFTLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxNQUFNOztVQUM1QyxZQUFZLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7SUFFakU7Ozs7O0lBQU8sQ0FBQyxLQUFRLEVBQUUsTUFBYyxFQUFLLEVBQUU7O2NBQy9CLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLG1CQUFNLEtBQUssQ0FBRTs7Y0FDL0UsV0FBVyxHQUFHLFlBQVksSUFBSSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQzs7Y0FDaEYsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQztRQUU1RyxPQUFPLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pILENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgSU5JVF9BQ1RJT04sIElOSVRfQUNUSU9OX0VGRkVDVFMsIFVQREFURV9BQ1RJT04gfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgSVN0b3JhZ2VTeW5jT3B0aW9ucyB9IGZyb20gJy4vbW9kZWxzL3N0b3JhZ2Utc3luYy1vcHRpb25zJztcbmltcG9ydCB7IHJlaHlkcmF0ZVN0YXRlIH0gZnJvbSAnLi9yZWh5ZHJhdGUtc3RhdGUnO1xuaW1wb3J0IHsgc3RhdGVTeW5jIH0gZnJvbSAnLi9zdGF0ZS1zeW5jJztcblxuLyoqXG4gKiBUaGUgU3RvcmFnZVN5bmMgTWV0YSBSZWR1Y2VyIGZvciBAbmdyeC9zdG9yZS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIG1ldGEgcmVkdWNlclxuICpcbiAqIENoZWNrIG91dCBnaXRodWIgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9sYXJzY29tL25ncngtc3RvcmUtc3RvcmFnZXN5bmNcbiAqXG4gKiBAcmV0dXJucyB0aGUgbWV0YSByZWR1Y2VyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzdG9yYWdlU3luYyA9IDxUPihvcHRpb25zOiBJU3RvcmFnZVN5bmNPcHRpb25zPFQ+KSA9PiAoXG4gIHJlZHVjZXI6IChzdGF0ZTogVCwgYWN0aW9uOiBBY3Rpb24pID0+IFRcbik6ICgoc3RhdGU6IFQsIGFjdGlvbjogQWN0aW9uKSA9PiBUKSA9PiB7XG4gIGNvbnN0IGNvbmZpZzogSVN0b3JhZ2VTeW5jT3B0aW9uczxUPiA9IHtcbiAgICByZWh5ZHJhdGU6IHRydWUsXG4gICAgc3RvcmFnZUtleVNlcmlhbGl6ZXI6IChrZXk6IHN0cmluZykgPT4ga2V5LFxuICAgIHJlaHlkcmF0ZVN0YXRlTWVyZ2VyOiAobmV4dFN0YXRlLCByZWh5ZHJhdGVkU3RhdGUpID0+IG1lcmdlKHt9LCBuZXh0U3RhdGUsIHJlaHlkcmF0ZWRTdGF0ZSksXG4gICAgLi4ub3B0aW9uc1xuICB9O1xuXG4gIGNvbnN0IHsgcmVoeWRyYXRlLCByZWh5ZHJhdGVTdGF0ZU1lcmdlciB9ID0gY29uZmlnO1xuICBjb25zdCByZXZpdmVkU3RhdGUgPSByZWh5ZHJhdGUgPyByZWh5ZHJhdGVTdGF0ZTxUPihjb25maWcpIDogbnVsbDtcblxuICByZXR1cm4gKHN0YXRlOiBULCBhY3Rpb246IEFjdGlvbik6IFQgPT4ge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IGFjdGlvbi50eXBlID09PSBJTklUX0FDVElPTiA/IHJlZHVjZXIoc3RhdGUsIGFjdGlvbikgOiB7IC4uLnN0YXRlIH07XG4gICAgY29uc3Qgc2hvdWxkTWVyZ2UgPSByZXZpdmVkU3RhdGUgJiYgW0lOSVRfQUNUSU9OLCBVUERBVEVfQUNUSU9OXS5pbmNsdWRlcyhhY3Rpb24udHlwZSk7XG4gICAgY29uc3QgbWVyZ2VkU3RhdGUgPSByZWR1Y2VyKHNob3VsZE1lcmdlID8gcmVoeWRyYXRlU3RhdGVNZXJnZXIobmV4dFN0YXRlLCByZXZpdmVkU3RhdGUpIDogbmV4dFN0YXRlLCBhY3Rpb24pO1xuXG4gICAgcmV0dXJuIFtJTklUX0FDVElPTiwgSU5JVF9BQ1RJT05fRUZGRUNUU10uaW5jbHVkZXMoYWN0aW9uLnR5cGUpID8gbWVyZ2VkU3RhdGUgOiBzdGF0ZVN5bmMobWVyZ2VkU3RhdGUsIGNvbmZpZyk7XG4gIH07XG59O1xuIl19