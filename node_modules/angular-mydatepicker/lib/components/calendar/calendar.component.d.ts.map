{"version":3,"file":"calendar.component.d.ts","sources":["calendar.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, Renderer2, ChangeDetectorRef, AfterViewInit, OnDestroy } from \"@angular/core\";\nimport { IMyDate } from \"../../interfaces/my-date.interface\";\nimport { IMyDateRange } from \"../../interfaces/my-date-range.interface\";\nimport { IMyMonth } from \"../../interfaces/my-month.interface\";\nimport { IMyCalendarDay } from \"../../interfaces/my-calendar-day.interface\";\nimport { IMyCalendarMonth } from \"../../interfaces/my-calendar-month.interface\";\nimport { IMyCalendarYear } from \"../../interfaces/my-calendar-year.interface\";\nimport { IMyWeek } from \"../../interfaces/my-week.interface\";\nimport { IMyOptions } from \"../../interfaces/my-options.interface\";\nimport { IMySelectorPosition } from \"../../interfaces/my-selector-pos.interface\";\nimport { IMyCalendarViewChanged } from \"../../interfaces/my-calendar-view-changed.interface\";\nimport { IMyDateModel } from \"../../interfaces/my-date-model.interface\";\nimport { IMyRangeDateSelection } from \"../../interfaces/my-range-date-selection.interface\";\nimport { IMyCalendarAnimation } from \"../../interfaces/my-calendar-animation.interface\";\nimport { IMyDefaultMonth } from \"../../interfaces/my-default-month.interface\";\nimport { UtilService } from \"../../services/angular-mydatepicker.util.service\";\nimport { DefaultView } from \"../../enums/default-view.enum\";\nimport { HeaderAction } from \"../../enums/header-action.enum\";\nimport { ActiveView } from \"../../enums/active-view.enum\";\nexport declare class CalendarComponent implements AfterViewInit, OnDestroy {\n    private elem;\n    private renderer;\n    private cdr;\n    private utilService;\n    selectorEl: ElementRef;\n    styleEl: ElementRef;\n    position: string;\n    opts: IMyOptions;\n    visibleMonth: IMyMonth;\n    selectedMonth: IMyMonth;\n    selectedDate: IMyDate;\n    selectedDateRange: IMyDateRange;\n    weekDays: Array<string>;\n    dates: Array<IMyWeek>;\n    months: Array<Array<IMyCalendarMonth>>;\n    years: Array<Array<IMyCalendarYear>>;\n    yearsDuration: string;\n    dayIdx: number;\n    weekDayOpts: Array<string>;\n    selectMonth: boolean;\n    selectYear: boolean;\n    viewChanged: boolean;\n    dateChanged: (dm: IMyDateModel, close: boolean) => void;\n    calendarViewChanged: (cvc: IMyCalendarViewChanged) => void;\n    rangeDateSelection: (rds: IMyRangeDateSelection) => void;\n    viewActivated: (va: ActiveView) => void;\n    closedByEsc: () => void;\n    selectorPos: IMySelectorPosition;\n    prevViewDisabled: boolean;\n    nextViewDisabled: boolean;\n    clickListener: () => void;\n    constructor(elem: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef, utilService: UtilService);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    initializeComponent(opts: IMyOptions, defaultMonth: IMyDefaultMonth, selectedValue: any, inputValue: string, selectorPos: IMySelectorPosition, dc: (dm: IMyDateModel, close: boolean) => void, cvc: (cvc: IMyCalendarViewChanged) => void, rds: (rds: IMyRangeDateSelection) => void, va: (va: ActiveView) => void, cbe: () => void): void;\n    initializeView(defaultMonth: IMyDefaultMonth, selectedValue: any, inputValue: string): void;\n    refreshComponent(opts: IMyOptions, defaultMonth: IMyDefaultMonth, selectedValue: any, inputValue: string): void;\n    headerAction(headerAction: HeaderAction): void;\n    setDefaultView(defaultView: DefaultView): void;\n    setCalendarAnimation(calAnimation: IMyCalendarAnimation, isOpen: boolean): void;\n    resetDateValue(): void;\n    clearDate(): void;\n    resetMonthYearSelect(): void;\n    onMonthViewBtnClicked(): void;\n    monthViewBtnClicked(): void;\n    onMonthCellClicked(cell: IMyCalendarMonth): void;\n    onMonthCellKeyDown(event: any): void;\n    onYearViewBtnClicked(): void;\n    yearViewBtnClicked(): void;\n    onYearCellClicked(cell: IMyCalendarYear): void;\n    onYearCellKeyDown(event: any): void;\n    generateMonths(): void;\n    generateYears(inputYear: number): void;\n    onTodayFooterClicked(): void;\n    getYearValueByRowAndCol(row: number, col: number): number;\n    setCalendarVisibleMonth(): void;\n    onViewActivated(event: any): void;\n    onPrevNavigateBtnClicked(): void;\n    onNextNavigateBtnClicked(): void;\n    setDateViewMonth(isNext: boolean): void;\n    onCloseSelector(event: any): void;\n    onDayCellClicked(cell: IMyCalendarDay): void;\n    onDayCellKeyDown(event: any): void;\n    getSourceRowAndColumnFromEvent(event: any): any;\n    getTargetFocusRowAndColumn(event: any, row: number, col: number, rowCount: number, colCount: number): any;\n    focusCellElement(type: string, row: number, col: number, direction: boolean, colCount: number): void;\n    focusToSelector(): void;\n    getCalendarElements(): any;\n    selectDate(date: IMyDate): void;\n    monthStartIdx(y: number, m: number): number;\n    isCurrDay(d: number, m: number, y: number, today: IMyDate): boolean;\n    getDayNumber(date: IMyDate): number;\n    getWeekday(date: IMyDate): string;\n    sundayIdx(): number;\n    generateCalendar(m: number, y: number, notifyChange: boolean): void;\n    setDateViewHeaderBtnDisabledState(m: number, y: number): void;\n    setMonthViewHeaderBtnDisabledState(y: number): void;\n    setYearViewHeaderBtnDisabledState(yp: number, yn: number): void;\n    swapHeaderBtnDisabled(): void;\n}\n"]}