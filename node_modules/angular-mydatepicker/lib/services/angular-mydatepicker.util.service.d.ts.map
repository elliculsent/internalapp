{"version":3,"file":"angular-mydatepicker.util.service.d.ts","sources":["angular-mydatepicker.util.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IMyDateModel } from \"../interfaces/my-date-model.interface\";\nimport { IMyDate } from \"../interfaces/my-date.interface\";\nimport { IMyDateRange } from \"../interfaces/my-date-range.interface\";\nimport { IMyMonth } from \"../interfaces/my-month.interface\";\nimport { IMyMonthLabels } from \"../interfaces/my-month-labels.interface\";\nimport { IMyMarkedDate } from \"../interfaces/my-marked-date.interface\";\nimport { IMyDisabledDate } from \"../interfaces/my-disabled-date.interface\";\nimport { IMyDateFormat } from \"../interfaces/my-date-format.interface\";\nimport { IMyValidateOptions } from \"../interfaces/my-validate-options.interface\";\nimport { IMyOptions } from \"../interfaces/my-options.interface\";\nexport declare class UtilService {\n    weekDays: Array<string>;\n    isDateValid(dateStr: string, options: IMyOptions, validateOpts: IMyValidateOptions): IMyDate;\n    isDateValidDateRange(dateRangeStr: string, options: IMyOptions, validateOpts: IMyValidateOptions): IMyDateRange;\n    getDateValue(dateStr: string, dateFormat: string, delimeters: Array<string>): Array<IMyDateFormat>;\n    getMonthNumberByMonthName(df: IMyDateFormat, monthLabels: IMyMonthLabels): number;\n    getNumberByValue(df: IMyDateFormat): number;\n    parseDefaultMonth(monthString: string): IMyMonth;\n    isDisabledDate(date: IMyDate, options: IMyOptions): IMyDisabledDate;\n    getDisabledValue(disabled: boolean, styleClass: string): IMyDisabledDate;\n    dateMatchToDates(date: IMyDate, dates: Array<IMyDate>): boolean;\n    isDisabledMonth(year: number, month: number, options: IMyOptions): boolean;\n    isDisabledYear(year: number, options: IMyOptions): boolean;\n    isDisabledByDisableUntil(date: IMyDate, disableUntil: IMyDate): boolean;\n    isDisabledByDisableSince(date: IMyDate, disableSince: IMyDate): boolean;\n    isPastDatesEnabled(date: IMyDate, enableDates: Array<IMyDate>): boolean;\n    isFutureDatesEnabled(date: IMyDate, enableDates: Array<IMyDate>): boolean;\n    isDatesEnabled(dateBegin: IMyDate, dateEnd: IMyDate, enableDates: Array<IMyDate>): boolean;\n    isDisabledByDisableDateRange(dateBegin: IMyDate, dateEnd: IMyDate, disableDateRanges: Array<IMyDateRange>): boolean;\n    isMarkedDate(date: IMyDate, options: IMyOptions): IMyMarkedDate;\n    getMarkedValue(marked: boolean, color: string, styleClass: string): IMyMarkedDate;\n    isHighlightedDate(date: IMyDate, options: IMyOptions): boolean;\n    getWeekNumber(date: IMyDate): number;\n    getDateModel(date: IMyDate, dateRange: IMyDateRange, dateFormat: string, monthLabels: IMyMonthLabels, rangeDelimiter: string, dateStr?: string): IMyDateModel;\n    formatDate(date: IMyDate, dateFormat: string, monthLabels: IMyMonthLabels): string;\n    getFormattedDate(model: IMyDateModel): string;\n    preZero(val: number): string;\n    isInitializedDate(date: IMyDate): boolean;\n    isDateEarlier(firstDate: IMyDate, secondDate: IMyDate): boolean;\n    isDateSameOrEarlier(firstDate: IMyDate, secondDate: IMyDate): boolean;\n    isDateSame(firstDate: IMyDate, secondDate: IMyDate): boolean;\n    isDateRangeBeginOrEndSame(dateRange: IMyDateRange, date: IMyDate): boolean;\n    isDateInRange(date: IMyDate, dateRange: IMyDateRange): boolean;\n    resetDate(): IMyDate;\n    getTimeInMilliseconds(date: IMyDate): number;\n    getToday(): IMyDate;\n    getDayNumber(date: IMyDate): number;\n    getWeekdayIndex(wd: string): number;\n    getEpocTime(date: IMyDate): number;\n    jsDateToMyDate(date: Date): IMyDate;\n    myDateToJsDate(date: IMyDate): Date;\n    datesInMonth(m: number, y: number): number;\n    datesInPrevMonth(m: number, y: number): number;\n    getJsDate(year: number, month: number, day: number): Date;\n    getSelectedValue(selectedValue: any, dateRange: boolean): any;\n    getKeyCodeFromEvent(event: any): number;\n    checkKeyName(key: string, keyName: string): boolean;\n}\n"]}