{"version":3,"file":"intercom.d.ts","sources":["intercom.d.ts"],"names":[],"mappingssourcesContent":["import { RendererFactory2 } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IntercomConfig } from '../shared/intercom-config';\nimport { BootInput } from '../types/boot-input';\n/**\n * A provider with every Intercom.JS method\n */\nexport declare class Intercom {\n    private config;\n    protected platformId: Object;\n    private router;\n    private rendererFactory;\n    private document;\n    private id;\n    private renderer2;\n    constructor(config: IntercomConfig, platformId: Object, router: Router, rendererFactory: RendererFactory2, document: any);\n    /**\n     * If you'd like to control when Intercom is loaded, you can use the 'boot' method.\n     * This is useful in situations like a one-page Javascript based application where the user may not be logged in\n     * when the page loads. You call this method with the standard intercomSettings object.\n     */\n    boot(intercomData?: BootInput): void;\n    /**\n     * If you have the Respond product (combined with another product like Engage)\n     * you should call the Intercom shutdown method to clear your users’ conversations anytime they logout\n     * of your application. Otherwise, the cookie we use to track who was most recently logged in on a given device\n     * or computer will keep these conversations in the Messenger for one week.\n     * This method will effectively clear out any user data that you have been passing through the JS API.\n     */\n    shutdown(): void;\n    /**\n     * Calling the update method without any other arguments will trigger the JavaScript to look for new messages\n     * that should be displayed to the current user (the one whose details are in the window.intercomSettings variable)\n     * and show them if they exist.\n     *\n     * Calling the update method with a JSON object of user details will update those fields on the current user\n     * in addition to logging an impression at the current URL and looking for new messages for the user.\n     */\n    update(data?: any): void;\n    /**\n     * This will hide the main Messenger panel if it is open. It will not hide the Messenger Launcher.\n     */\n    hide(): void;\n    /**\n     * This will show the Messenger. If there are no conversations it will open with the new message view,\n     * if there are it will open with the message list.\n     *\n     * If a `message` parameter is supplied, it will automatically open a new message window, aliasing showNewMessage().\n     *\n     */\n    show(message?: string): void;\n    /**\n     * To open the message window with the message list you can call `showMessages()`.\n     */\n    showMessages(): void;\n    /**\n     * To open the message window with the new message view you can call showNewMessage().\n     *\n     * This function takes an optional parameter that can be used to pre-populate the message composer as shown below.\n     */\n    showNewMessage(message?: string): void;\n    /**\n     * You can submit an event using the trackEvent method.\n     * This will associate the event with the currently logged in user and send it to Intercom.\n     * The final parameter is a map that can be used to send optional metadata about the event.\n     *\n     * You can also add custom information to events in the form of event metadata.\n     */\n    trackEvent(eventName: string, metadata?: any): void;\n    /**\n     * A visitor is someone who goes to your site but does not use the messenger.\n     * You can track these visitors via the visitor user_id.\n     * This user_id can be used to retrieve the visitor or lead through the REST API.\n     */\n    getVisitorId(): string;\n    /**\n     * Alias for getVisitorId()\n     * @alias getVisitorId()\n     * @readonly\n     */\n    readonly visitorId: string;\n    /**\n     * Gives you the ability to hook into the show event. Requires a function argument.\n     */\n    onShow(handler: () => void): void;\n    /**\n     * Gives you the ability to hook into the hide event. Requires a function argument.\n     */\n    onHide(handler: () => void): void;\n    /**\n     * This method allows you to register a function that will be called when the current number of unread messages changes.\n     */\n    onUnreadCountChange(handler: (unreadCount?: number) => void): void;\n    /**\n     * If you would like to trigger a tour based on an action a user or visitor takes in your site or application,\n     * ou can use this API method. You need to call this method with the id of the tour you wish to show. The id of\n     * the tour can be found in the “Use tour everywhere” section of the tour editor.\n     *\n     * Please note that tours shown via this API must be published and the “Use tour everywhere” section must be\n     * turned on. If you're calling this API using an invalid tour id, nothing will happen.\n     */\n    startTour(tourId: number): void;\n    /**\n     * Private handler to run Intercom methods safely\n     */\n    private _callIntercom;\n    injectIntercomScript(conf: IntercomConfig, afterInjectCallback: (ev: Event) => any): void;\n    loadIntercom(config: IntercomConfig, afterLoadCallback: (ev?: Event) => any): void;\n}\n"]}