{"version":3,"file":"cookieconsent-config.d.ts","sources":["cookieconsent-config.d.ts"],"names":[],"mappingssourcesContent":["import { NgcHTMLElements } from '../model/html-elements';\nimport { NgcLocationOptions } from '../model/location-options';\nimport { NgcLawOptions } from '../model/law-options';\nimport { NgcContentOptions } from '../model/content-options';\nimport { NgcCookieOptions } from '../model/cookie-options';\nimport { NgcPaletteOptions } from '../model/palette-options';\nimport { NgcCompliance, NgcLayouts } from '../model/common-interfaces';\nimport { NgcCookieType, NgcCookieLayout, NgcCookiePosition, NgcCookieTheme } from '../model/common-types';\n/**\n * Cookie Consent configuration object.\n */\nexport declare class NgcCookieConsentConfig {\n    /**\n     * If false, this prevents the popup from showing (useful for giving to control to another piece of code)\n     */\n    enabled?: boolean;\n    /**\n     * Optional (expecting a HTML element) if passed, the popup is appended to this element. default is `document.body`\n     */\n    container?: HTMLElement;\n    /**\n     * Defaults cookie options - it is RECOMMENDED to set these values to correspond with your server\n     */\n    cookie: NgcCookieOptions;\n    /**\n     * Each item defines the inner text for the element that it references\n     */\n    content?: NgcContentOptions;\n    /**\n     * This is the HTML for the elements above. The string {{header}} will be replaced with the equivalent text below.\n     * You can remove '{{header}}' and write the content directly inside the HTML if you want.\n     * - ARIA rules suggest to ensure controls are tabbable (so the browser can find the first control),\n     *    and to set the focus to the first interactive control (http://w3c.github.io/aria-in-html/)\n     */\n    elements?: NgcHTMLElements;\n    /**\n     * The placeholders {{classes}} and {{children}} both get replaced during initialisation:\n     * - {{classes}} is where additional classes get added\n     * - {{children}} is where the HTML children are placed\n     */\n    window?: string;\n    /**\n     * This is the html for the revoke button. This only shows up after the user has selected their level of consent\n     * It can be enabled of disabled using the `revokable` option\n     */\n    revokeBtn?: string;\n    /**\n     * Define types of 'compliance' here. '{{value}}' strings in here are linked to `elements`\n     */\n    compliance?: NgcCompliance;\n    /**\n     * Select your type of popup here\n     * refers to `compliance` (in other words, the buttons that are displayed)\n     */\n    type?: NgcCookieType;\n    /**\n     * define layout layouts here\n     */\n    layouts?: NgcLayouts;\n    /**\n     * Default layout (see above)\n     */\n    layout?: NgcCookieLayout;\n    /**\n     * This refers to the popup windows position. we currently support:\n     * - banner positions: top, bottom\n     * - floating positions: top-left, top-right, bottom-left, bottom-right\n    *\n     * adds a class `cc-floating` or `cc-banner` which helps when styling\n     */\n    position?: NgcCookiePosition;\n    /**\n     * Available styles\n     * - block (default, no extra classes)\n     * - edgeless\n     * - classic\n     * Use your own style name and use `.cc-theme-STYLENAME` class in CSS to edit.\n     * Note: style 'wire' is used for the configurator, but has no CSS styles of its own, only palette is used.\n     */\n    theme?: NgcCookieTheme;\n    /**\n     * The popup is `fixed` by default, but if you want it to be static (inline with the page content), set this to false\n     * Note: by default, we animate the height of the popup from 0 to full size\n     */\n    static?: boolean;\n    /**\n     * If you want custom colours, pass them in here. this object should look like this.\n     * ideally, any custom colours/themes should be created in a separate style sheet, as this is more efficient.\n     *\n     * {\n     *     popup: {background: '#000000', text: '#fff', link: '#fff'},//\n     *     button: {background: 'transparent', border: '#f8e71c', text: '#f8e71c'},//\n     *     highlight: {background: '#f8e71c', border: '#f8e71c', text: '#000000'},//\n     * }\n     *\n     * `highlight` is optional and extends `button`. if it exists, it will apply to the first button\n     * only background needs to be defined for every element. if not set, other colors can be calculated from it\n     */\n    palette?: NgcPaletteOptions;\n    /**\n     * Some countries REQUIRE that a user can change their mind. You can configure this yourself.\n     * Most of the time this should be false, but the `cookieconsent.law` can change this to `true` if it detects that it should\n     */\n    revokable?: boolean;\n    /**\n     * If true, the revokable button will tranlate in and out\n     */\n    animateRevokable?: boolean;\n    /**\n     * Used to disable link on existing layouts\n     * replaces element messagelink with message and removes content of link\n     */\n    showLink?: boolean;\n    /**\n     * Set value as scroll range to enable\n     */\n    dismissOnScroll?: boolean | number;\n    /**\n     * Set value as time in milliseconds to autodismiss after set time\n     */\n    dismissOnTimeout?: boolean | number;\n    /**\n     * The application automatically decide whether the popup should open.\n     * Set this to false to prevent this from happening and to allow you to control the behaviour yourself\n     */\n    autoOpen?: boolean;\n    /**\n     * By default the created HTML is automatically appended to the container (which defaults to <body>). You can prevent this behaviour\n     * by setting this to false, but if you do, you must attach the `element` yourself, which is a public property of the popup instance:\n     *\n     * var instance = cookieconsent.factory(options);\n     * document.body.appendChild(instance.element);\n     *\n      */\n    autoAttach?: boolean;\n    /**\n     * Simple whitelist for pages. specify page by:\n     * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n     * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n     *\n     */\n    whitelistPage?: string[];\n    /**\n     * Simple blacklist for pages. specify page by:\n     * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n     * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n     *\n     */\n    blacklistPage?: string[];\n    /**\n     * If this is defined, then it is used as the inner html instead of layout. This allows for ultimate customisation.\n     * Be sure to use the classes `cc-btn` and `cc-allow`, `cc-deny` or `cc-dismiss`. They enable the app to register click\n     * handlers. You can use other pre-existing classes too. See `src/styles` folder.\n     *\n     */\n    overrideHTML?: string;\n    /**\n     * Law Options\n     */\n    law?: NgcLawOptions;\n    /**\n     * Location Options\n     */\n    location?: boolean | NgcLocationOptions;\n    /**\n     * Set value as click anything on the page, excluding the `ignoreClicksFrom` below (if we click on the revoke button etc)\n     */\n    dismissOnWindowClick?: boolean;\n    /**\n     * If `dismissOnWindowClick` is true, we can click on 'revoke' and we'll still dismiss the banner, so we need exceptions.\n     * Should be an array of class names (not CSS selectors).\n     */\n    ignoreClicksFrom?: string[];\n    onPopupOpen?: () => void;\n    onPopupClose?: () => void;\n    onInitialise?: (status: string) => void;\n    onStatusChange?: (status: string, chosenBefore: boolean) => void;\n    onRevokeChoice?: () => void;\n    onNoCookieLaw?: (countryCode: string, country: string) => void;\n}\n"]}