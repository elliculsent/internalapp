{"version":3,"file":"cookieconsent.service.d.ts","sources":["cookieconsent.service.d.ts"],"names":[],"mappingssourcesContent":["import { Observable } from 'rxjs';\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializeEvent } from '../event/initialize.event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n    hasTransition: boolean;\n    status: NgcCookieConsentStatus;\n    getStatus(): NgcCookieConsentStatus;\n    initialise(config: NgcCookieConsentConfig, callback?: (popup: NgcCookieConsentPopup) => void): void;\n}\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n    setStatus(status: NgcCookieConsentStatus): void;\n    getStatus(): NgcCookieConsentStatus;\n    clearStatus(): void;\n    open(): NgcCookieConsentPopup;\n    close(showRevoke: boolean): NgcCookieConsentPopup;\n    destroy(): void;\n    fadeIn(): void;\n    fadeOut(): void;\n    isOpen(): boolean;\n    toggleRevokeButton(show: boolean): void;\n    hasAnswered(): boolean;\n    hasConsented(): boolean;\n}\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n    cookieconsent: NgcCookieConsent;\n}\n/**\n * Service to interact with Cookie Consent API.\n */\nexport declare class NgcCookieConsentService {\n    private cookieconsent;\n    private popupInstance;\n    private window;\n    private config;\n    private popupOpenSource;\n    private popupCloseSource;\n    private initializeSource;\n    private statusChangeSource;\n    private revokeChoiceSource;\n    private noCookieLawSource;\n    /**\n     * Observable to subscribe to and get notified when Cookie Consent popup opens.\n     */\n    popupOpen$: Observable<void>;\n    /**\n     * Observable to subscribe to and get notified when Cookie Consent popup closes.\n     */\n    popupClose$: Observable<void>;\n    /**\n     * Observable to subscribe to and get notified when Cookie Consent initializes.\n     */\n    initialize$: Observable<NgcInitializeEvent>;\n    /**\n    * Observable to subscribe to and get notified when Cookie Consent status changes.\n    */\n    statusChange$: Observable<NgcStatusChangeEvent>;\n    /**\n     * Observable to subscribe to and get notified when Cookie is revoked.\n     */\n    revokeChoice$: Observable<void>;\n    /**\n    * Observable to subscribe to and get notified when no Cookie Law is applicable.\n    */\n    noCookieLaw$: Observable<NgcNoCookieLawEvent>;\n    constructor(windowService: WindowService, config: NgcCookieConsentConfig);\n    private checkPopupInstantiated(method);\n    /**\n     * Initializes Cookie Consent with the provided configuration.\n     * @param config the configuration object\n     */\n    init(config: NgcCookieConsentConfig): void;\n    /**\n     * Gets the current configuration  used by the Cookie Consent.\n     */\n    getConfig(): NgcCookieConsentConfig;\n    /**\n     * Gets the current cookie status.\n     */\n    getStatus(): NgcCookieConsentStatus;\n    /**\n     * Gets the current browser support for translations\n     */\n    getTransition(): boolean;\n    /**\n     * Clears the current cookie status.\n     */\n    clearStatus(): void;\n    open(): NgcCookieConsentPopup;\n    close(showRevoke: boolean): NgcCookieConsentPopup;\n    destroy(): void;\n    fadeIn(): void;\n    fadeOut(): void;\n    isOpen(): boolean;\n    toggleRevokeButton(show: boolean): void;\n    hasAnswered(): boolean;\n    hasConsented(): boolean;\n}\n"]}